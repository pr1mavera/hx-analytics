(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{292:function(t,v,_){"use strict";_.r(v);var e=_(0),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"事件消费队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事件消费队列"}},[t._v("#")]),t._v(" 事件消费队列")]),t._v(" "),_("p",[t._v("由于客户端sdk记录用户行为的全量日志，因此为减轻服务器压力，此处构造一个简单的消息队列与节流的模型"),_("br"),t._v("\n客户端触发用户事件时，延迟2秒（可配置），之后将两秒内所有的行为事件数据统一上报")]),t._v(" "),_("h2",{attrs:{id:"事件上报策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事件上报策略"}},[t._v("#")]),t._v(" 事件上报策略")]),t._v(" "),_("ul",[_("li",[t._v("事件消费队列的消费者存在两种消费方式，两种消费方式都是有效的\n"),_("ol",[_("li",[t._v("远程服务")]),t._v(" "),_("li",[t._v("本地缓存")])])]),t._v(" "),_("li",[t._v("当客户端网络状态发生变化时，会切换消费方式（联网远程服务，断网本地缓存）")]),t._v(" "),_("li",[t._v("当上报至远程服务失败时，会将数据暂时缓存在本地缓存\n本地缓存的数据")])]),t._v(" "),_("h2",{attrs:{id:"事件上报模式整体流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事件上报模式整体流程"}},[t._v("#")]),t._v(" 事件上报模式整体流程")]),t._v(" "),_("ol",[_("li",[t._v("绑定模块"),_("br"),t._v("\n转换至事件上报模式（Report）之后，绑定以下模块：\n"),_("ul",[_("li",[t._v("宿主事件模块（AppEvent）")]),t._v(" "),_("li",[t._v("事件上报策略模块（ReportStrategy）")]),t._v(" "),_("li",[t._v("消息队列模块（MsgsQueue）")]),t._v(" "),_("li",[t._v("页面记录跟踪模块（PageTracer）")])])]),t._v(" "),_("li",[t._v("用户行为触发事件监控，包装数据推送至消息队列"),_("br"),t._v("\n宿主环境用户行为事件产生，进过对应事件的中间件包装数据字典（js对象，包含该事件属性），触发 Report.onTrigger 包装成一份数据报，通过 MsgsQueue.push 推送至消息队列")]),t._v(" "),_("li",[t._v("消息队列推送消息至消费者（事件上报策略）消费数据"),_("br"),t._v("\nMsgsQueue.push 接口为一个节流器，节流时长为两秒（可通过系统配置），每次触发两秒之后会将消息队列中的消息全部提交至消费者消费")]),t._v(" "),_("li",[t._v("消费者根据当前消费策略\n消费者会根据当前的消费策略（远程服务、本地缓存）消费数据，当上报至远程服务失败时，会将数据暂时缓存在本地缓存")])])])}),[],!1,null,null,null);v.default=r.exports}}]);